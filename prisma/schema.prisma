// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Actor {
  id         String   @id
  name       String
  image_path String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum PlaylistType {
  MANUAL
  SMART
}

model Playlist {
  id          String         @id @default(uuid())
  name        String
  description String?
  type        PlaylistType   @default(MANUAL)
  image       String?
  items       PlaylistItem[]
  conditions  Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
}

model PlaylistItem {
  id         String    @id @default(uuid())

  // Cascade delete when playlist is removed
  playlist   Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String

  item       Item      @relation(fields: [itemId], references: [id])
  itemId     String

  itemOrder  Int       @default(0)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@unique([playlistId, itemId], name: "playlist_item_unique")
  @@index([playlistId, itemOrder])
  @@index([itemId])
}

model Item {
  id         String    @id
  title      String
  startTime  Float     @default(0)
  endTime    Float     @default(0)
  screenshot String?
  stream     String?
  preview    String?
  rating     Int?
  sceneId    String?   // Scene ID from Stash server for maintenance checks
  orphaned   Boolean   @default(false) // Mark items whose scenes no longer exist in Stash

  playlists  PlaylistItem[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@index([sceneId])
  @@index([orphaned])
}

model RefreshLog {
  id                String    @id @default(uuid())
  refreshType       String    // "manual" or "scheduled"
  success           Boolean
  refreshedPlaylists Int      @default(0)
  errors            Json?     // Array of error messages
  duration          Int       // Duration in milliseconds
  createdAt         DateTime  @default(now())

  @@index([createdAt])
}
